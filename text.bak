
class CoseSigner {
  private data: string

  constructor(data: any) {
    this.data = data
  }

  public async sign() {
    const cert = Certificate.fromPEM(
      fs.readFileSync(path.resolve(__dirname, '../certificates/dsc-worker.pem'))
    )
    var bytes = new Uint8Array(cert.raw)

    const fingerprint = rawHash().update(cert.raw).digest()
    const keyID = fingerprint.slice(0, 8)

    const pk = PrivateKey.fromPEM(
      fs.readFileSync(path.resolve(__dirname, '../certificates/dsc-worker.p8'))
    )

    // Highly ES256 specific - extract the 'D' for signing.
    //
    const keyD = Buffer.from(pk.keyRaw.slice(7, 7 + 32))

    var qrcode

    var data = JSON.parse(JSON.stringify(this.data))
    const plaintext = cbor.encode(data)

    const headers = {
      p: { alg: 'ES256', kid: keyID },
      u: {},
    }

    const signer = {
      key: {
        d: keyD,
      },
    }

    const res = await cose.sign.create(headers, plaintext, signer)

    console.log('RES IN RESPONSE')
    let buf = zlib.deflate(res)
    buf = 'HC1:' + base45.encode(buf)

    //Response

    qrcode = Buffer.from(buf).toString()

    return qrcode
  }
}



async function getCose() {
  const cert = Certificate.fromPEM(
    fs.readFileSync(path.resolve(__dirname, '../certificates/dsc-worker.pem'))
  )
  var bytes = new Uint8Array(cert.raw)

  const fingerprint = rawHash().update(cert.raw).digest()
  const keyID = fingerprint.slice(0, 8)

  const pk = PrivateKey.fromPEM(
    fs.readFileSync(path.resolve(__dirname, '../certificates/dsc-worker.p8'))
  )

  // Highly ES256 specific - extract the 'D' for signing.
  //
  const keyD = Buffer.from(pk.keyRaw.slice(7, 7 + 32))

  var qrcode

  const data1 = {
    Category: {
      Id_Categoria: 22,
      Id_Setor: 2,
      Nome: 'Administrativos',
    },
    Nationality: {
      Id_Nacionalidade: 2,
      Nome: 'Portuguesa',
    },
    DocumentType: {
      Id_tipoDocumento: 2,
      Nome: 'Cartão de Estrangeiro Residente',
    },
    Vaccinations: [
      {
        Id_regVacinacao: 86,
        Id_regIndividual: 143,
        Vacina: 'AstraZeneca',
        Dose: '1ª Dose',
        numLote: '4120Z028',
        Fabricante: 'Serum Institute of Índia',
        PostoVacinacao: 'EA Depósito Central de Medicamentos',
        DataCad: '2021-03-02T17:17:37.91',
      },
      {
        Id_regVacinacao: 551835,
        Id_regIndividual: 143,
        Vacina: 'AstraZeneca',
        Dose: '2ª Dose',
        numLote: '4120Z029',
        Fabricante: 'Serum Institute of Índia',
        PostoVacinacao: 'PVAR Paz Flor1 (Tenda)',
        DataCad: '2021-05-04T14:44:44.02',
      },
      {
        Id_regVacinacao: 1089823,
        Id_regIndividual: 143,
        Vacina: 'Pfizer',
        Dose: '1ª Dose',
        numLote: 'FC8889',
        Fabricante: 'mRNA Pfizer',
        PostoVacinacao: 'EA - Depósito Central de Vacinas',
        DataCad: '2021-06-03T00:00:00',
      },
    ],
    VaccinationsNext: {
      Id_regIndividual: 143,
      NumDias: 21,
      NumDiasProximaDose: -190,
      DataProximaDose: '2021-06-24T00:00:00',
      Dose: '2ª Dose',
      SituacaoRegularizada: false,
    },
    Institution: {
      Id_regInstituicao: 54,
      Nome: 'Centro de Vacinação Depósito Central de Medicamentos',
      Provincia: 'Luanda',
      Municipio: 'Kilamba Kiaxi',
      Morada: 'Depósito Central de Medicamentos',
      Codigo: '54ZLM0WOLYNGT',
    },
    Id_regIndividual: 143,
    Id_regInstituicao: 54,
    Nome: 'JOSÉ MARIA FERREIRA MOURA',
    Telefone: '932378148',
    Email: 'jose.ferreira.moura@gmail.com',
    Genero: 'Masculino',
    dtNascimento: '1969-02-24T00:00:00',
    Id_tipoDocumento: 2,
    docNum: '0040955T01',
    Id_Nacionalidade: 2,
    Id_provincia: 13,
    Id_Municipio: 133,
    Id_Categoria: 22,
    Codigo: '1437NPZ0PY8BW',
    Status: 'C',
    DataCad: '2021-03-02T17:06:44.233',
    FlagRegSimp: null,
    Id_regDoencas: null,
    Id_Setor: 2,
    Comorbilidade: null,
    certificado: 'S',
    Observacao: null,
    WebAlt: null,
    NomePai: null,
    NomeMae: null,
    NumDoses: 0,
  }

  var data = JSON.parse(JSON.stringify(data1))

  const plaintext = cbor.encode(data)

  const headers = {
    p: { alg: 'ES256', kid: keyID },
    u: {},
  }

  const signer = {
    key: {
      d: keyD,
    },
  }

  const res = await cose.sign.create(headers, plaintext, signer)

  console.log('RES IN RESPONSE')
  let buf = zlib.deflate(res)
  buf = 'HC1:' + base45.encode(buf)

  //Response

  qrcode = Buffer.from(buf).toString()

  return qrcode
}
